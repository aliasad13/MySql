TO DO:

how to add values into a newly created couloumn
order of select,delete,orderby,...

select,from,where,group by,having,orderby,limit

DROP DATABASE;

CREATE DATABASE db1;

USE db1;

CREATE TABLE student (
student_id varchar(10) not null,
studentname varchar(100) not null,
age int not null,
place varchar(50) not null,
primary key(student_id)
);

SELECT * FROM student;

INSERT INTO student VALUES 
('s1','AKhil','20','Trivandrum'),
('s2','Manju','18','Eranankulam'),
('s3','Shareef','13','Palakkad'),
('s4','Praveen','32','Thrissur'),
('s5','john','20','Trivandrum'),
('s6','Akhil','20','trivandrum'),
('s7','Aneesh','14','Kottayam');

//UPDATING A TABLE//


UPDATE students SET place = 'Kannur' where student_id = 's1';
UPDATE students SET age ='22' where student_id ='s4';

//COPY TABLE//

CREATE TABLE student_new LIKE student;     //create table like student
INSERT INTO  student_new SELECT * from student;  //insert same values to student_new

//DELETE //ROW DELETE,can roll back while truncate,drop cannot rollback

DELETE from student_new where student_id = 's2';

//SELECT//

SELECT * FROM student;
SELECT student_id FROM student;
SELECT student_id,student_name FROM student;
SELECT student_id,student_name,place FROM student;

//SQL CLAUSES//
*****************

//WHERE//

SELECT student_name,student_id,place FROM student WHERE place = 'Eranankulam';
SELECT studen_name,student_id,place FROM student WHERE age = 20;
SELECT * FROM students WHERE age > 20 ;
SELECT * FROM students WHERE age < 20 ;

//DISTINCT//(to avoid duplicate data)

SELECT DISTINCT place FROM student;
SELECT DISTINCT student_name FROM student;
(suppose if there are multiple people coming from eranankulam,then only the 1st person on the list with eranankulam as place will be shown,others will be ignored)

//ORDERBY//--FOR SORTING IN ASCENDING OR DESCENDING ORDER

SELECT student_name,student_id,place FROM student ORDER BY student_name ASC;(ASC is optional/by default order by is asc)
SELECT * FROM student ORDER BY student_name DESC;
SELECT * FROM student ORDER BY age ASC/DESC;


//ADD OR MODIFY COLOUMNS//   cloumn = alter table,
******************************     row = update,delete

playing with coloumns using alter table

1.adding coloumns
ALTER TABLE student ADD contact INT(10) NOT NULL;// coloumn added

2.modifying the datatype
ALTER TABLE student MODIFY contact VARCHAR(20) NULL;

3.renaming coloumn
ALTER TABLE student RENAME COLOUMN contact TO st_contact;

4.delete coloumn
ALTER TABLE student DROP COLOUMN st_contact;

AMRD== ADD and MODIFY,RENAME COLOUMN st_contact TO,DROP COLOUMN

5.delete all records from all the coloums in the table
TRUNCATE student;
(the difference between DROP TABLE student and TRUNCATE student is that while drop table vanishes the entire table,truncate only deletes the fields)

//LIMIT//

to attain first or last values

SELECT * FROM student ORDER BY student_id ASC LIMIT 1;// one record with stid 1;
SELECT * FROM student ORDER BY student_id DESC LIMIT 1;//one record with stid last;
SELECT * FROM student ORDER BY student_id DESC LIMIT 2;//2 records with last stid;
SELECT student_name,marks FROM student  ORDER BY marks ASC LIMIT 1,1; //1 record after 1st row ,//LIMIT 1,5==1 record AFTER 5th ROW. 


//ORDER BY rand() OR RANDOM FUNCTION//

used anong with order by//returns random values//used alone will return a random no between 0&1//given in mathematical fns

SELECT * FROM student ORDER BY rand() LIMIT 1; 
SELECT * FROM student ORDER BY rand() LIMIT 2;


//CHANGING COLOUMN NAME TEMPORARILY// using ALTER TABLE RENAME COLOUMN TO

SELECT student_name AS 'first_name',age,place FROM student;
SELECT student_name AS 'first_name',age AS 'st_age',place AS 'location' FROM student;  


//OPERATOTS IN SQL//

1.arithmetic operators

SELECT 1+3 AS sum; //4 will be displayed in a new coloumn
SELECT 3*4 AS product //12 displayed in a new coloumn product
SELECT 3-4 AS diffference //-1 in new coloumn difference
SELECT 1/2 AS quotient // 0.5
SELECT 5%3 AS remainder// 2 as remainder

2.comparison operators

SELECT 10=10 AS result//1 in new coloumn result
SELECT 1=10 AS result//0 in new coloumn 
SELECT 10>5 AS result//1
SELECT 10<5 AS result//0
SELECT 10 <=10 AS result //1
SELECT 9<=10 AS result//1
SELECT 9<>10 AS result//9 NOT EQUAL TO 10//1 as result


SELECT * FROM student WHERE age = 20;
SELECT * FROM student WHERE age > 20;
SELECT * FROm student WHERE age <= 20;
SELECT * FROM student WHERE age != 20;

3.logical operators AND,OR

SELECT * FROM students WHERE age > 20 AND place = 'Eranankulam';
SELECT * FROM  students WHERE age < 18 AND place ='Kannur';
SELECT * FROM student WHERE age >= 20 OR place = 'Kannur';

4.BETWEEN

SELECT * FROM students WHERE age BETWEEN 20 AND 30;//inclusive of 20 1nd 30

5.WHERE EXISTS()//instead of if operator

(if the condition inside exists() is true,then the oustside condition is executed)
    
SELECT student_name,student_id FROM students WHERE EXISTS(SELECT age FROM students WHERE age>20);
i.e. if there exists any student with age > 2o in student table , then select studentname and studentid.

SELECT student_name,student_id FROM students WHERE EXISTS(SELECT * FROM students where age > 40); //nothing displayed 
0
6.IN
 for multiple ORS

SELECT * FROM student WHERE place IN ('Malappuram','Trivandrum','Kannur');
SELECT * FROM student WHERE age IN (20,22,18);

7.LIKE 
mostly used for sorting using names

SELECT * FROM student WHERE age LIKE 20;(where age = 20) 
SELECT * FROM student WHERE student_name LIKE 'Akhil';//datas with  name akhil
SELECT * FROM student WHERE student_name LIKE 'A%';//datas with name starting with A
SELECT * FROM student WHERE student_name LIKE '%A';//datas with name ending with A
SELECT * FROM student WHERE student_name LIke '%o%';//datas with o anywhere in the name.it can be in the beginning,end or middle
SELECT * FROM student WHERE student_name LIKE 'A___l';//gives back Akhil

8.NOT LIKE
SELECT * FROM student WHERE age NOT LIKE 20;
SELECT * FROM student WHERE student_name NOT LIKE 'Akhil';
//all students datas except those with studentname Akhil,WHERE name != 'Akhil';
SELECT * FROM student WHERE student_name NOT LIKE 'A%';
SELECT * FROM student WHERE student_name NOT LIKE '%a%';

9.OR

SELECT * FROM student WHERE age>20 OR place ='Eranankulam';

//USING MULTIPLE AND ,OR or AND and OR in same query//

SELECT * FROM student WHERE (age > 20 AND place in('Malappuram','Eranankulam','Trivandrum')) OR student_name like '%a%'; 
SELECT * FROM student WHERE (age>20) OR (age >20 AND PLACE = 'Eranankulam') OR (age>15 AND place = 'Malappuram' AND student_name LIKE '%a%');
	
AGGREGATE FUNCTIONS()

STRING FUNCTIONS
*******************

1.char_length()/length()
SELECT place,char_length(place) AS length FROM students// gives place in one coloumn and character length of that place in next coloumn

2.concat()//to concat two coloumns
SELECT concat(student_name," ",place) AS full_name FROM student;//Akhil Kannur,Manju Eranankulam,Shareef Palakkad,...

3.insert()//to exchange character
SELECt insert("Google",1,1,"f") AS f ;//foogle
SELECT insert(student_name,1,1,"f") AS f FROM student //fkhil,fanju,fareef
SELECT insert("google",1,3,"f,u,u")  AS fuu;//fuugle

4.upper()
SELECT age,upper(student_name) AS stu_name FROM student;//to uppercase
SELECT upper("hello world") AS lower ;//HELLO WORLD
 
5.lower()
SELECT lower(studen_name) AS st_name,age FROM student;

6.reverse()
SELECT reverse("hello") AS reversed;//new coloumn reversed with olleh
SELECT reverse(student_name) AS reverse_name,reverse(place) AS reverse_place FROM student;

7.repeat()
SELECT repeat("hello",5) AS new_string;//hello,hello,hello,hello,hello

8.left()
SELECT left("hello",2) AS left;//he
SELECT left(student_name,2) AS left FROM student;

9.right()
SELECT right(student_name,2) AS right FROM student;
10.initcap()//first letter of all words into capSELECT intcap("wepoijfw wnfi wnefm iwenfu9ni uqn9fh8 qh uhd") AS initcap ; 



MATHEMATICAL FUNCTIONS
***************************

1.abs()
SELECT abs(-123) AS abssolute_value; //123 - to find the mod

2.avg()
SELECT avg(student_age) AS avg_age FROM students;

3.ceiling()//next whole number
SELECT ceiling(25.6) AS ceiling ;//26
SELECT ceiling(25.4) AS ceiling;//26
SELECT ceiling(total_mark) AS tot_mark from STUDENTS;
4.floor()
SELECT floor(25.6) AS floor;//25

5.round()
SELECT round(25.5) AS round;//26
SELECT round(25.4) AS round;//25
SELECT round(st_mark) as round_marks FROM students;//
SELECT round(25.6675,2) AS round;//from 25.6675   to  25.668   to   25.67  //2 decimal places

6.count()
SELECT count(student_id) AS count FROM student;
SELECT count(student_id) AS total_no where st_mark > 90 FROM student;//total no.of students with mark >90;

8.max(),min()

SELECT max(std_mark),student_name AS max_mark FROM student; //will i e
SELECt student_name,st_mark FROM student ORDER BY st_mark DESC LIMIT 1;
SELECT min(age) AS min_age FROM student; 

9.pi()

SELECT pi() as pi;

10.rand()

SELECT rand() AS random_no;//returns a random no between 0 & 1
SELECT rand()*11 AS random_no;//rendom(may or maynot be whole) number between 0 and 10
SELECT  rand()*101 as random;//between 0 & 100;
SELECT floor(rand()*10) as rand_whole;//whole no. between 1 & 10 //also round() or ceiling() can be used

11.sqrt()
SELECT sqrt(9) as aquare_root ;//3

12.sum()
SELECT sum(std_mark) AS tot_std_mark from student;



DATE FUNCTIONS
*****************

1.current_timestamp() or now();

SELECT current_timestamp() AS time_stamp;//date and time//2021-05-15  12:28:36

2.day()/month()/year()

SELECT day("2021/12/10") AS today;//10

3.dayname()

SELECT dayname("2021/12/05") AS today;//friday

4.sysdate()
 database date and time 
 
5.curdate(),curtime()
current date alone,current time alone



________________________________________________________________________________________

RELATIONAL DATABASE
***********************

CREATE TABLE courses 
(course_id VARCHAR(10) NOT NULL,
course name VARCHAR(20) NOT NULL,
PRIMARY KEY(course_id) );

INSERT INTO courses VALUES 
('c1','computer hardware'),
('c2','networking'),
('c3','web designing'),
('c4','graphic designing'),
('c5','ms office'),
('c6','c++'),
('c7','java');

CREATE TABLE enrollment (
enrollment_id VARCHAR(10) NOT NULL,
student_id VARCHAR(10) NOT NULL,
course_id VARCHAR(10) NOT NULL
PRIMARY KEY(enrollment_id),        //if there were only 2 tables we will have only one foreign key
FOREIGN KEY(student_id) REFERENCES student(student_id),
FOREIGN KEY(course_id) REFERENCES courses(course_id)    );

//a foreign key is the primary key of another tables

INSERT INTO enrollment VALUES
('e1','s1','c1'),
('e2','s7','c4'),
('e3','s6','c2'),
('e4','s5','c1'),
('e5','s5','c1');

INNER JOIN = returns all matching values from both tables
outer joins
LEFT JOIN = returns all values from left table and matching values from right table
RIGHT JOIN= returns all values from right table and matching values from left table
FULL JOIN= returns all records from all tables

 

